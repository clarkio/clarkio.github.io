---
import BaseLayout from '../layouts/BaseLayout.astro'
import { Image } from 'astro:assets'
import 'dotenv/config'
import star from '../images/star.png'

const requestBody = `
{
  user(login: "clarkio") {
    pinnedItems(first: 6, types: REPOSITORY) {
      edges {
        node {
            ...on Repository {
              id
            name
            description
            stargazers {
              totalCount
            }
            url
            languages(first: 3) {
              edges {
                node {
                  name
                }
              }
            }
          }
        }
      }
    }
  }
}
`

let projects = []
if (!process.env.GH_ACCESS_TOKEN || process.env.GH_ACCESS_TOKEN === '') {
  console.error(
    'No GitHub access token found. Please set GH_ACCESS_TOKEN in your environment variables.'
  )
} else {
  const response = await fetch('https://api.github.com/graphql', {
    method: 'POST',
    headers: { authorization: `Bearer ${process.env.GH_ACCESS_TOKEN}` },
    body: JSON.stringify({
      query: requestBody
    })
  }).then((res) => res.json())
  projects = response.data?.user?.pinnedItems?.edges ?? []
}
---

<BaseLayout
  title='Projects'
  description="Clarkio's GitHub repositories for all of his projects"
  keywords='clarkio, projects, github, repository, repositories'
>
  <h1>Projects</h1>
  <p>
    You can see the top, pinned, projects below but be sure to go to <a
      href='https://github.com/clarkio'>Clarkio's GitHub profile</a
    > for more.
  </p>

  <div class='project-list'>
    <article>
      <header>
        <h2><a href='/wos-helper'> Words on Stream Helper</a></h2>
      </header>
      <div class='description'>
        <p>
          A tool to help when playing <a href='https://wos.gg/'
            >Words on Stream</a
          > with your community. It provides visibility to correctly guessed words
          and highlights the biggest word for the round. It will also reveal the
          correctly guessed words when playing higher levels.
        </p>
      </div>
      <div class='project-details'>
        <Image src={star} alt='stargazers' />
        <p></p>
        <ul class='languages'>
          <li>JavaScript</li>
          <li>WebSockets</li>
          <li>CSS</li>
          <li>HTML</li>
        </ul>
      </div>
    </article>
    <article>
      <header>
        <h2>
          <a
            href='https://github.com/clarkio/discord-wordle-bot'
            target='_blank'
          >
            Discord Wordle Bot
          </a>
        </h2>
      </header>
      <div class='description'>
        <p>
          Play <a href='https://www.nytimes.com/games/wordle/index.html'
            >Wordle</a
          > with your community in your Discord server. Supports storing results
          in a libSQL database, providing a leaderboard API and calculating winners
          for each player of a Wordle game.
        </p>
      </div>
      <div class='project-details'>
        <Image src={star} alt='stargazers' />
        <p></p>
        <ul class='languages'>
          <li>Bun.js</li>
          <li>TypeScript</li>
          <li>libSQL/SQLite</li>
          <li>Turso</li>
        </ul>
      </div>
    </article>
    {
      projects.map(
        ({ node: { url, name, stargazers, description, languages } }) => (
          <article>
            <header>
              <h2>
                <a href={url} target='_blank'>
                  {name}
                </a>
              </h2>
            </header>
            <div class='description'>
              <p>{description}</p>
            </div>
            <div class='project-details'>
              <Image src={star} alt='stargazers' />
              <p>{stargazers.totalCount}</p>
              {languages && (
                <ul class='languages'>
                  {languages.edges.map(({ node: { name } }) => (
                    <li>{name}</li>
                  ))}
                </ul>
              )}
            </div>
          </article>
        )
      )
    }
  </div>
</BaseLayout>

<style>
  header,
  .description,
  .project-details {
    padding: 0 1rem;
  }
  article h2 a {
    color: #000;
    text-decoration: underline;
  }

  ::global(.dark) article h2 a {
    color: rgba(255, 255, 255, 0.75);
  }
  .project-list {
    display: grid;
    gap: 30px;
    grid-template-columns: repeat(auto-fit, minmax(290px, 1fr));
    list-style: none;
  }

  article,
  .description {
    border: 1px dotted rgba(0, 0, 255, 0.2);
  }

  ::global(.dark) article,
  ::global(.dark) .description {
    border: 1px dotted rgba(255, 255, 255, 0.2);
  }

  .description,
  ::global(.dark) .description {
    border-width: 1px 0;
  }

  article {
    background: rgba(0, 0, 255, 0.02);
    border-radius: 4px;
    display: grid;
    gap: 0;
    grid-template-rows: subgrid;
    grid-row: span 3;
  }

  ::global(.dark) article {
    background: rgba(255, 255, 255, 0.02);
  }

  article:hover {
    background: rgba(0, 0, 255, 0.15);
  }

  ::global(.dark) article:hover {
    background: rgba(255, 255, 255, 0.1);
  }

  .project-details {
    align-items: center;
    display: grid;
    gap: 0.5rem;
    grid-template-columns: auto auto 1fr;
  }

  .project-details p {
    margin: 3px 0 0 0;
  }
  .project-details p,
  ul.languages li {
    font-size: 12px;
    font-weight: 600;
  }

  img {
    height: 16px;
    width: 16px;
  }

  ul.languages {
    justify-self: end;
    display: flex;
    padding: 0;
  }
  ul.languages li {
    border-radius: 20px;
    display: inline-block;
    margin-left: 0.5rem;
  }

  @media (max-width: 300px) {
    .project-details {
      gap: 1rem;
      grid-template-columns: 16px 1fr;
      margin-top: 1rem;
    }
    .project-details p {
      margin: 0;
    }
    ul.languages {
      justify-self: start;
      margin: 0 0 0.5rem 0;
    }
    ul.languages li {
      margin-left: 0;
      margin-right: 1rem;
    }
  }
</style>
