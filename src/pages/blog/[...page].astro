---
import readingTime from 'reading-time'

import BaseLayout from '../../layouts/BaseLayout.astro'
import Paginator from '../../components/Paginator.astro'

export async function getStaticPaths({ paginate, rss }) {
  // const oldPosts = await Astro.glob('../old-posts/*.md');
  const allPosts = await Astro.glob('./**/*.md')
  // const allPosts = oldPosts.concat(newPosts);
  const sortedPosts = allPosts.sort(
    (a, b) =>
      new Date(b.frontmatter.publishDate).valueOf() -
      new Date(a.frontmatter.publishDate).valueOf()
  )
  return paginate(sortedPosts, { pageSize: 10 })
}

const { page } = Astro.props
---

<BaseLayout
  title="Blog Posts"
  description="Recently written posts on various topics and interests."
  keywords="clarkio, blog posts, post, posts, blog, writings, articles"
>
  <h1>Blog Posts</h1>
  <div class="articles">
    {
      page.data.map(
        ({
          rawContent,
          url,
          frontmatter: { title, publishDate, description }
        }) => {
          if (url.includes('old-posts')) {
            const oldUrl = url.replace('/blog/old-posts/', '').replace('/blog/')
            const year = oldUrl.slice(0, 4)
            const month = oldUrl.slice(5, 7)
            const day = oldUrl.slice(8, 10)
            const name = oldUrl.slice(11)
            url = `/${year}/${month}/${day}/${name}`
          }
          return (
            <article>
              <header>
                <h2>
                  <a href={url}>{title}</a>
                </h2>
              </header>
              <div class="description">
                <p>{description}</p>
              </div>
              <div class="details">
                <p class="date">{publishDate}</p>
                <p class="reading-time">{readingTime(rawContent()).text}</p>
              </div>
            </article>
          )
        }
      )
    }
  </div>
  <Paginator page={page} />
</BaseLayout>

<style>
  .articles {
    display: grid;
    gap: 30px;
    grid-template-columns: 1fr;
    list-style: none;
  }
  article {
    background: rgba(0, 0, 255, 0.02);
    border-radius: 4px;
    display: grid;
    gap: 0;
    grid-template-rows: subgrid;
    grid-row: span 3;
  }
  article:hover {
    background: rgba(0, 0, 255, 0.15);
  }

  ::global(.dark) article:hover {
    background: rgba(255, 255, 255, 0.1);
  }

  header,
  .details,
  .description {
    padding: 0 1rem;
  }

  article,
  .description {
    border: 1px dotted rgba(0, 0, 255, 0.2);
  }

  ::global(.dark) article h2 a {
    color: rgba(255, 255, 255, 0.75);
  }

  ::global(.dark) article,
  ::global(.dark) .description {
    border: 1px dotted rgba(255, 255, 255, 0.2);
  }
  .description,
  ::global(.dark) .description {
    border-width: 1px 0;
  }
  h2 a {
    color: #000;
  }

  li a {
    font-weight: unset;
  }

  :global(.dark) h2 a {
    color: rgb(255 255 255 / 0.75);
  }

  .details {
    display: grid;
    grid-template-columns: auto auto;
  }

  p {
    color: #333;
  }

  ::global(.dark) p {
    color: rgb(255 255 255 / 0.5);
  }

  .reading-time {
    justify-self: end;
  }
</style>
