---
import Logo from '../components/Icons/Logo.astro'
import WosBaseLayout from '../layouts/WosBaseLayout.astro'
---

<WosBaseLayout
  title="Words on Stream Highlighter"
  description="Clarkio's Words on Stream helper tool"
  keywords="clarkio, words on stream, wos, twitch, streaming, helper, wordsonstream"
>
  <div class="logo-container">
    <a href="/">
      <div class="logo dark">
        <Logo name="Logo" />
      </div>
    </a>

    <h2>Clarkio's Words on Stream Highlighter</h2>
  </div>
  <details id="wos-helper-controls">
    <summary>Show/Hide Controls</summary>
    <div class="controls">
      <p>
        If you're not providing the WOS Mirror Link and Twitch Channel use the
        following form to set up the game. In the Mirror Link input enter the
        full mirror link URL (example:
        https://wos.gg/r/aaa-bbbb-cccc123-dd321-eeeee123). In the Twitch Channel
        input enter just the channel username you want to connect to for the
        chat messages. After entering these values make sure to click the
        Connect buttons for each.
      </p>
      <div>
        <label>WOS Mirror Link:</label>
        <input type="text" id="mirrorUrl" placeholder="Enter WOS mirror link" />
        <button id="wos-connect-btn">Connect WOS</button>
        <button id="wos-discconnect-btn">Disconnect WOS</button>
      </div>
      <div>
        <label>Twitch Channel:</label>
        <input
          type="text"
          id="twitchChannel"
          placeholder="Enter channel name"
        />
        <button id="twitch-connect-btn">Connect Twitch</button>
        <button id="twitch-disconnect-btn">Disconnect Twitch</button>
      </div>
    </div>
  </details>

  <div class="wos-main-grid">
    <div class="level-data-grid-container">
      <div class="grid-item">
        <div class="level-data-container">
          <div>
            <span id="level-title">Level:</span>
            <span id="level-value"></span>
          </div>
          <div>
            <span id="hidden-letter-label">Hidden Letters:</span>
            <span id="hidden-letter"></span>
          </div>
          <div>
            <span id="fake-letter-label">Fake Letters:</span>
            <span id="fake-letter"></span>
          </div>
          <div>
            <span id="letters-label">Letters:</span>
            <span id="letters"></span>
          </div>
          <div id="correct-words-log-container">
            <span>Correct Words: (* words missed)</span>
            <div id="correct-words-log" class="logs"></div>
          </div>
        </div>
      </div>
    </div>
    <div class="twitch-chat-frame">
      <iframe id="twitch-chat-widget" src=""></iframe>
    </div>
    <div class="iframe-container" id="wos-board" style="display: none;">
      <iframe id="wos-board-iframe" src=""></iframe>
    </div>
    <details id="wos-helper-logs">
      <summary>Show/Hide Logs</summary>
      <div class="log-container">
        <div>
          <h3>WOS Event Log:</h3>
          <div id="wos-game-log" class="logs"></div>
        </div>
        <div>
          <h3>Twitch Chat Log:</h3>
          <div id="twitch-chat-log" class="logs"></div>
        </div>
      </div>
    </details>
  </div>
</WosBaseLayout>

<script>
  import { GameSpectator } from '../scripts/wos-helper'
  import { removeUnnecessaryElements } from '../scripts/wos-widget'

  const twitchConnectBtn = document.getElementById(
    'twitch-connect-btn'
  ) as HTMLButtonElement
  twitchConnectBtn.addEventListener('click', () => {
    const channel = (
      document.getElementById('twitchChannel') as HTMLInputElement
    ).value
    spectator.connectToTwitch(channel)
  })
  const twitchDisconnectBtn = document.getElementById(
    'twitch-disconnect-btn'
  ) as HTMLButtonElement
  twitchDisconnectBtn.addEventListener('click', () => {
    spectator.disconnectTwitch()
  })

  const wosConnectBtn = document.getElementById(
    'wos-connect-btn'
  ) as HTMLButtonElement
  wosConnectBtn.addEventListener('click', () => {
    const mirrorUrl = (document.getElementById('mirrorUrl') as HTMLInputElement)
      .value
    spectator.connectToWosGame(mirrorUrl)
  })
  const wosDisconnectBtn = document.getElementById(
    'wos-discconnect-btn'
  ) as HTMLButtonElement
  wosDisconnectBtn.addEventListener('click', () => {
    spectator.disconnect()
  })

  const spectator = new GameSpectator()

  document.addEventListener('DOMContentLoaded', () => {
    // check for query parameters in the url
    const urlParams = new URLSearchParams(window.location.search)
    if (urlParams.has('mirrorUrl')) {
      const url = urlParams.get('mirrorUrl') || ''
      const mirrorUrlInput = document.getElementById(
        'mirrorUrl'
      ) as HTMLInputElement
      mirrorUrlInput.value = url
      const iframe = document.getElementById(
        'wos-board-iframe'
      ) as HTMLIFrameElement
      iframe.src = url
      console.log(url)
    }

    if (urlParams.has('chat')) {
      const isChatEnabled = urlParams.get('chat')?.toLowerCase() === 'true'
      const twitchChatWidget = document.getElementById(
        'twitch-chat-widget'
      ) as HTMLIFrameElement
      if (isChatEnabled) {
        twitchChatWidget.style.display = ''
      } else {
        twitchChatWidget.style.display = 'none'
      }
    }

    if (urlParams.has('twitchChannel')) {
      const twitchChannel = urlParams.get('twitchChannel') || 'clarkio'
      const twitchChannelInput = document.getElementById(
        'twitchChannel'
      ) as HTMLInputElement
      twitchChannelInput.value = twitchChannel

      const twitchChatWidget = document.getElementById(
        'twitch-chat-widget'
      ) as HTMLIFrameElement
      twitchChatWidget.src = `https://www.twitch.tv/embed/${twitchChannel}/chat?darkpopout&parent=${location.hostname}`
    }
    const mirrorUrl = (document.getElementById('mirrorUrl') as HTMLInputElement)
      .value
    spectator.connectToWosGame(mirrorUrl)
    const channel = (
      document.getElementById('twitchChannel') as HTMLInputElement
    ).value
    spectator.connectToTwitch(channel)

    if (urlParams.has('widget')) {
      const isWidget = urlParams.get('widget')?.toLowerCase() === 'true'
      if (isWidget) {
        document.body.classList.add('widget-mode')
        removeUnnecessaryElements()
      }
    }

    if (urlParams.has('board')) {
      const isBoardVisible = urlParams.get('board')?.toLowerCase() === 'true'
      if (isBoardVisible) {
        document.getElementById('wos-board')!.style.display = ''
      } else {
        document.getElementById('wos-board')!.style.display = 'none'
      }
    }
  })
</script>

<style>
  /* Override wrapper max-width when in widget mode */
  :global(.widget-mode .wrapper) {
    max-width: 100% !important;
    padding: 0 !important;
  }
</style>
